// Generated by CoffeeScript 1.6.2
(function() {
  var ChildProcess, Config, Crypto, Fs, Mkdirp, PasswordHash, Path, Program, UUID, WorkingQueue;

  Program = require('commander');

  WorkingQueue = require('capisce').WorkingQueue;

  PasswordHash = require('password-hash');

  Path = require('path');

  Fs = require('fs');

  Mkdirp = require('mkdirp');

  ChildProcess = require('child_process');

  UUID = require('node-uuid');

  Crypto = require('crypto');

  Config = {
    getAppVersion: function() {
      return JSON.parse(Fs.readFileSync(__dirname + "/../../package.json")).version;
    },
    getAppVersionCode: function() {
      return JSON.parse(Fs.readFileSync(__dirname + "/../../package.json")).versionCode;
    },
    getDataDirectory: function() {
      var dir, home;

      home = process.env['HOME'];
      if (process.platform === 'darwin') {
        dir = Path.join(home, 'Library', 'Application Support', 'TapChat');
      } else {
        dir = Path.join(home, '.tapchat');
      }
      Mkdirp.sync(dir);
      return dir;
    },
    load: function(callback) {
      var _this = this;

      return Config.readConfig(function(config) {
        if (config) {
          return callback(config);
        } else {
          return Config.setup(callback);
        }
      });
    },
    setup: function(callback) {
      var config, queue,
        _this = this;

      console.log('Welcome to TapChat!');
      config = {};
      queue = new WorkingQueue(1);
      queue.perform(function(over) {
        return Program.prompt('Choose a port [8067]: ', function(port) {
          config.port = port || 8067;
          return over();
        });
      });
      queue.perform(function(over) {
        return Program.password('Choose a password:', '*', function(password) {
          config.password = PasswordHash.generate(password);
          return over();
        });
      });
      queue.perform(function(over) {
        return Config.generateCert(over);
      });
      queue.whenDone(function() {
        return Config.verifyConfig(config, callback);
      });
      return queue.doneAddingJobs();
    },
    verifyConfig: function(config, callback) {
      if (!config.push_id) {
        config.push_id = UUID.v4();
      }
      if (!config.push_key) {
        config.push_key = Crypto.randomBytes(32).toString('base64');
      }
      return Config.saveConfig(config, callback);
    },
    generateCert: function(callback) {
      var certFile,
        _this = this;

      certFile = Config.getCertFile();
      return Fs.exists(certFile, function(exists) {
        var cmd;

        if (!exists) {
          console.log('\nGenerating SSL certificate (this may take a minute)...');
          cmd = "openssl req -new -x509 -days 10000 -nodes -out '" + certFile + "' -keyout '" + certFile + "' -subj '/CN=tapchat'";
          return ChildProcess.exec(cmd, function(error, stdout, stderr) {
            if (error) {
              throw error;
            }
            return Config.getFingerprint(function(fingerprint) {
              console.log("Your SSL fingerprint is: " + fingerprint);
              return callback();
            });
          });
        } else {
          return callback();
        }
      });
    },
    getFingerprint: function(callback) {
      var cmd,
        _this = this;

      cmd = "openssl x509 -fingerprint -noout -in '" + (Config.getCertFile()) + "'";
      return ChildProcess.exec(cmd, function(error, stdout, stderr) {
        if (error) {
          throw error;
        }
        return callback(stdout.replace(/^SHA1 Fingerprint=/, ''));
      });
    },
    readConfig: function(callback) {
      var _this = this;

      return Fs.exists(Config.getConfigFile(), function(exists) {
        if (exists) {
          return Fs.readFile(Config.getConfigFile(), function(err, data) {
            var config;

            if (err) {
              throw err;
            }
            config = JSON.parse(data);
            return Config.verifyConfig(config, callback);
          });
        } else {
          return callback(null);
        }
      });
    },
    saveConfig: function(config, callback) {
      var _this = this;

      return Fs.writeFile(Config.getConfigFile(), JSON.stringify(config, null, 4), function(err) {
        if (err) {
          throw err;
        }
        return callback(config);
      });
    },
    getConfigFile: function() {
      return Path.join(Config.getDataDirectory(), 'config.json');
    },
    getCertFile: function() {
      return Path.join(Config.getDataDirectory(), 'tapchat.pem');
    },
    getPidFile: function() {
      return Path.join(Config.getDataDirectory(), 'tapchat.pid');
    },
    getLogFile: function() {
      return Path.join(Config.getDataDirectory(), 'tapchat.log');
    }
  };

  module.exports = Config;

}).call(this);
