// Generated by CoffeeScript 1.6.2
(function() {
  var ChannelBuffer, CoffeeScript, ConsoleBuffer, ConversationBuffer, compact, count, del, ends, extend, flatten, last, merge, starts, _, _ref;

  ConsoleBuffer = require('./console_buffer');

  ChannelBuffer = require('./channel_buffer');

  ConversationBuffer = require('./conversation_buffer');

  CoffeeScript = require('coffee-script');

  _ref = CoffeeScript.helpers, starts = _ref.starts, ends = _ref.ends, compact = _ref.compact, count = _ref.count, merge = _ref.merge, extend = _ref.extend, flatten = _ref.flatten, del = _ref.del, last = _ref.last;

  _ = require('underscore');

  module.exports = {
    makeServer: function(conn) {
      return {
        type: 'makeserver',
        cid: conn.id,
        name: conn.getName(),
        nick: conn.getConfiguredNick(),
        realname: conn.getRealName(),
        hostname: conn.getHostName(),
        port: conn.getPort(),
        disconnected: conn.isDisconnected(),
        ssl: conn.isSSL(),
        server_pass: conn.getServerPass()
      };
    },
    serverDetailsChanged: function(conn) {
      return merge(this.makeServer(conn), {
        type: 'server_details_changed'
      });
    },
    connecting: function(conn) {
      return {
        cid: conn.id,
        type: 'connecting',
        nick: conn.getConfiguredNick(),
        ssl: conn.isSSL(),
        hostname: conn.getHostName(),
        port: conn.getPort()
      };
    },
    makeBuffer: function(buffer) {
      var msg;

      ({
        cid: buffer.connection.id,
        bid: buffer.id
      });
      msg = {
        type: 'makebuffer',
        buffer_type: buffer.type,
        cid: buffer.connection.id,
        bid: buffer.id,
        name: buffer.name,
        archived: buffer.isArchived
      };
      if (buffer.lastSeenEid) {
        msg.last_seen_eid = buffer.lastSeenEid;
      }
      if (buffer instanceof ChannelBuffer) {
        msg.joined = buffer.isJoined;
      }
      return msg;
    },
    channelInit: function(buffer) {
      return {
        type: 'channel_init',
        cid: buffer.connection.id,
        bid: buffer.id,
        joined: buffer.isJoined,
        chan: buffer.name,
        mode: buffer.mode,
        topic: {
          topic_text: buffer.topicText,
          topic_time: buffer.topicTime,
          topic_author: buffer.topicBy
        },
        members: _.values(buffer.members).map(function(member) {
          return {
            nick: member.nick,
            realname: member.realName,
            usermask: member.host
          };
        })
      };
    },
    deleteBuffer: function(buffer) {
      return {
        type: 'delete_buffer',
        cid: buffer.connection.id,
        bid: buffer.id
      };
    },
    quit: function(buffer, nick, reason) {
      return {
        type: 'quit',
        cid: buffer.connection.id,
        bid: buffer.id,
        nick: nick,
        msg: reason,
        hostmask: null
      };
    },
    serverMotd: function(conn, motd) {
      if (!conn) {
        throw 'no conn';
      }
      if (!conn.consoleBuffer) {
        throw 'no console buffer';
      }
      return {
        type: 'server_motd',
        cid: conn.id,
        bid: conn.consoleBuffer.id,
        msg: motd
      };
    },
    connectionDeleted: function(conn) {
      return {
        type: 'connection_deleted',
        cid: conn.id
      };
    }
  };

}).call(this);
